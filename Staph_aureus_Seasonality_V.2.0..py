from itertools import islice
from matplotlib import pyplot as plt
from matplotlib.collections import BrokenBarHCollection
import os
import matplotlib
import matplotlib.patches as mpatches
import matplotlib.pyplot as plt
from matplotlib.collections import BrokenBarHCollection
from statsmodels.tsa.stattools import adfuller
import pandas as pd

'''
/Library/Frameworks/Python.framework/Versions/3.6/bin/python3.6 /Users/LarryBliss/PycharmProjects/Final_Year_Project/Staph_aureus_Seasonality_V.2.0..py
/Users/LarryBliss/Library/Python/3.6/lib/python/site-packages/statsmodels/compat/pandas.py:56: FutureWarning: The pandas.core.datetools module is deprecated and will be removed in a future version. Please use the pandas.tseries module instead.
  from pandas.core import datetools
([1, 1362, 1640, 2773, 3163, 3399, 3396, 4508, 4518, 6452, 6489, 9158, 10384, 11898, 12277, 13563, 14214, 14909, 14906, 15235, 15598, 16566, 16874, 17797, 17812, 19779, 19776, 20222, 20254, 21654, 21932, 23215, 24418, 25119, 25132, 26958, 26951, 28285, 28286, 29074, 29463, 30263, 30490, 32808, 33176, 33655, 33977, 35233, 35648, 35887, 36851, 37018, 37815, 38558, 38655, 39083, 41235, 42221, 42193, 42453, 51257, 52834, 55467, 55727, 55724, 56482, 56698, 61296, 61420, 63036, 68084, 69829, 71925, 72989, 73020, 74354, 74373, 75566, 77780, 78076, 78284, 78886, 79153, 82305, 82362, 82844, 83050, 84036, 84257, 85027, 85046, 85849, 85917, 86684, 86752, 87519, 87586, 88353, 88450, 90687, 90838, 92016, 92018, 93406, 98879, 100207, 100397, 100870, 101132, 102724, 109152, 110132, 110129, 111139, 111160, 112914, 112991, 114163, 114153, 115889, 115870, 117648, 117620, 118045, 118039, 118386, 118386, 119588, 119592, 120356, 120552, 121178, 121390, 122166, 122511, 123482, 123445, 124137, 124347, 125513, 125494, 126732, 126722, 128152, 128420, 129019, 129386, 130111, 131293, 132000, 132001, 133359, 133440, 134102, 134130, 135308, 139204, 140748, 140799, 142334, 142508, 143680, 143814, 144590, 144596, 145771, 146156, 148765, 149108, 149776, 149792, 150478, 150481, 151245, 151265, 153088, 153078, 154106, 154119, 155228, 155232, 156356, 156359, 156985, 156990, 158099, 158113, 159279, 159272, 160477, 160478, 161683, 161694, 162251, 162251, 163138, 163192, 164454, 164531, 165676, 166884, 168371, 169018, 169977, 170654, 171166, 171508, 172248, 172262, 173233, 173230, 173991, 174001, 175035, 175252, 175611, 175635, 176810, 177196, 178446, 178893, 186068, 186081, 186725, 199143, 200198, 200198, 201094, 201106, 202560, 202560, 203438, 204126, 206915, 207787, 208899, 208896, 209576, 209573, 210751, 210958, 211179, 212857, 213234, 213538, 214314, 214429, 215199, 215443, 216237, 216224, 217549, 217549, 217875, 217878, 218165, 218701, 219495, 219482, 219574, 220056, 220247, 221077, 221772, 222022, 222444, 222711, 223121, 223148, 223567, 224019, 224441, 226327, 227145, 227233, 228000, 228690, 229511, 229522, 230340, 230333, 231634, 231777, 233375, 233388, 234323, 234320, 235189, 235186, 236001, 235994, 236743, 236755, 237948, 239255, 240832, 241814, 242071, 242071, 242337, 242692, 243768, 244016, 244678, 244671, 245447, 245843, 247030, 250570, 251169, 251839, 253065, 253062, 253697, 253714, 254655, 254655, 255350, 255644, 257044, 257270, 258205, 258527, 259378, 261198, 263027, 267079, 267885, 268717, 269190, 272835, 273221, 274165, 275928, 275953, 277686, 278139, 278825, 278803, 280161, 280163, 281170, 281148, 282263, 282274, 282966, 282977, 283444, 289584, 290450, 290777, 291463, 291895, 293334, 293455, 294234, 294206, 294934, 294931, 295662, 297264, 297626, 297645, 298244, 298517, 298768, 298768, 299034, 299329, 300876, 301062, 301529, 301613, 301795, 302012, 302836, 303070, 303606, 303836, 304567, 304633, 307038, 307042, 307356, 307347, 308324, 308633, 312322, 312312, 313871, 313864, 314439, 314432, 315109, 315129, 315581, 315605, 316639, 316662, 317315, 319575, 320744, 322338, 322703, 322885, 324162, 329813, 331255, 333114, 334391, 334598, 335029, 335261, 336295, 336331, 336732, 337973, 338488, 338802, 339416, 341560, 343158, 343539, 345017, 348317, 349372, 349372, 350037, 351431, 351886, 352126, 353508, 353777, 354985, 355887, 356534, 356547, 358478, 359570, 360490, 361602, 362549, 362580, 363629, 366225, 366845, 367076, 367975, 367968, 369200, 369418, 369744, 369774, 370793, 371856, 372542, 374157, 375092, 376993, 378654, 378654, 379892, 380168, 381289, 381400, 382281, 382768, 383337, 383562, 384875, 385042, 385548, 386700, 388304, 389168, 390085, 390160, 390795, 390806, 390997, 391911, 393290, 395372, 396109, 397211, 398008, 398141, 399088, 399607, 402645, 402645, 403118, 403346, 403579, 403601, 404377, 404688, 405812, 408625, 409707, 409802, 411202, 413049, 415004, 415030, 415773, 415837, 416163, 416591, 416938, 422435, 423340, 423557, 424711, 424925, 425833, 426231, 427172, 427293, 427847, 427924, 428694, 429952, 430734, 430748, 431419, 431420, 432025, 432195, 433199, 433230, 433736, 434295, 435554, 435551, 436036, 436050, 436496, 436502, 436735, 436742, 437341, 437361, 438383, 438960, 439310, 441218, 441982, 442614, 443879, 443996, 447163, 448206, 449114, 451875, 454010, 454123, 455457, 456394, 456702, 456730, 457392, 457419, 458042, 458042, 458317, 458350, 459183, 459250, 459528, 459557, 459910, 459934, 460587, 460590, 461024, 461014, 461223, 461247, 461510, 461542, 461910, 461946, 462263, 462290, 462829, 462852, 463037, 463069, 463467, 463492, 464028, 464059, 464418, 464439, 464939, 464956, 465135, 465152, 465592, 465592, 466884, 466901, 467548, 467741, 467959, 467991, 468104, 468127, 468492, 468516, 468905, 468980, 469924, 469941, 470309, 470847, 471656, 471653, 472513, 472503, 473309, 473314, 474117, 474357, 474794, 474808, 475206, 477278, 477502, 479593, 479697, 479777, 480424, 480424, 481053, 481298, 482314, 483564, 485228, 485265, 485969, 487073, 487888, 488099, 488953, 491850, 492266, 492336, 493184, 493417, 493620, 494887, 495642, 496009, 496437, 496453, 496968, 496981, 497913, 497917, 498897, 498919, 499230, 499236, 500948, 500966, 502378, 502644, 503513, 503788, 504792, 505027, 506034, 506342, 507904, 508079, 508615, 508628, 508867, 508930, 509439, 511678, 512871, 512858, 514615, 514622, 515692, 516084, 517067, 517079, 518110, 518107, 519075, 519311, 520681, 521250, 521765, 521809, 522996, 523012, 523698, 523875, 525218, 525317, 525790, 526113, 526901, 527035, 527556, 527704, 528768, 535009, 535917, 536106, 536915, 536917, 537849, 537876, 539231, 539509, 546954, 553211, 555016, 555248, 556030, 556098, 556955, 561796, 562461, 562897, 563835, 563866, 564096, 564768, 566141, 566598, 567011, 567211, 567654, 568799, 569461, 569740, 571041, 571055, 571405, 572338, 573522, 573522, 574715, 575114, 575785, 577144, 578004, 578116, 578646, 578982, 580592, 581440, 582300, 582766, 584025, 584114, 584449, 584687, 586114, 586361, 587677, 587795, 588049, 588396, 588995, 588996, 590072, 590059, 590895, 590979, 592025, 592022, 592441, 592548, 593072, 593099, 594337, 594365, 594994, 595018, 596145, 596312, 596665, 596686, 597414, 597457, 597669, 597867, 598388, 598388, 598927, 598949, 600457, 600488, 601354, 601376, 602788, 602808, 603212, 603774, 604007, 604118, 605383, 605417, 605857, 606550, 606945, 607334, 608029, 608416, 609105, 609098, 609928, 609912, 610703, 610705, 611346, 611432, 612304, 615542, 615835, 615847, 616056, 616184, 616321, 618105, 619175, 619190, 620548, 621065, 622585, 622754, 624046, 625843, 626277, 626277, 627056, 627089, 628048, 628460, 628612, 628628, 630085, 630082, 631296, 631314, 631550, 631547, 632722, 633328, 633651, 635091, 635327, 635340, 635699, 636153, 637361, 637492, 638967, 639378, 640694, 640713, 641087, 648888, 649481, 649896, 650273, 650635, 651762, 652070, 653260, 653369, 654613, 659046, 660377, 660702, 661277, 661282, 661806, 661822, 662397, 662557, 666030, 666034, 669687, 669853, 670755, 671084, 671473, 673951, 674259, 674807, 676753, 676956, 679565, 680603, 681493, 681496, 681747, 681731, 682339, 682425, 683597, 683697, 684818, 684796, 685311, 685622, 686056, 686793, 687734, 687746, 688990, 689659, 690585, 690585, 691655, 691671, 692753, 692743, 693684, 693703, 695358, 695570, 697285, 697336, 698322, 698325, 698777, 698917, 700521, 700612, 701277, 701407, 701595, 701600, 701746, 702326, 702514, 702898, 703197, 703209, 703514, 703533, 703880, 704071, 704211, 706177, 706851, 708514, 709122, 709932, 710606, 710725, 711240, 717015, 717689, 721983, 723740, 723730, 724110, 724374, 724952, 725078, 725686, 725932, 726270, 726275, 726460, 727337, 728881, 729086, 729646, 731176, 731469, 731598, 733202, 734595, 734990, 735361, 736080, 736201, 737187, 737235, 739043, 741580, 741927, 741944, 742579, 742596, 743405, 743402, 744256, 744277, 745662, 745672, 747516, 747794, 748564, 750188, 751756, 751901, 752659, 752853, 753362, 756251, 757735, 757725, 757976, 757976, 759538, 759840, 760643, 760877, 763186, 763203, 764561, 764697, 766211, 767477, 767695, 768961, 769137, 769152, 769754, 771097, 773061, 773064, 773384, 773381, 774022, 775611, 776570, 777191, 777742, 778914, 780275, 780262, 781935, 781922, 782725, 782718, 783539, 789494, 789913, 796869, 798062, 805324, 805806, 805793, 806917, 806921, 807625, 807625, 807888, 807890, 808561, 808554, 810743, 810722, 812206, 812199, 813227, 813230, 813796, 813811, 815289, 815311, 816558, 820077, 820286, 820736, 822031, 822456, 823628, 823682, 824224, 824378, 824644, 824647, 826365, 827033, 828394, 828391, 829410, 829543, 830205, 833764, 834390, 834561, 835673, 835677, 836654, 836745, 838037, 838041, 839447, 839615, 839890, 840034, 840573, 840586, 841680, 841673, 842470, 842476, 843285, 843285, 844358, 844432, 845451, 845734, 846153, 848537, 849364, 849811, 851658, 852590, 852865, 853179, 854405, 854959, 858411, 859902, 860813, 860838, 861299, 861626, 862663, 862679, 863113, 864341, 864595, 865057, 865599, 865601, 866083, 867411, 867968, 868048, 868221, 871606, 871854, 871867, 872310, 872325, 872468, 873107, 873292, 873294, 874046, 874062, 874238, 874502, 874630, 874623, 874784, 874878, 875138, 875148, 875369, 875362, 875985, 875985, 876410, 876421, 876972, 876973, 877647, 877640, 878395, 878395, 878751, 878748, 879989, 879986, 880201, 880205, 880426, 880436, 880861, 880858, 881262, 881267, 881452, 881538, 881792, 881798, 882040, 882053, 882454, 882451, 882798, 882795, 883103, 883096, 883332, 883337, 883879, 883916, 884152, 884177, 884413, 884403, 884579, 884580, 884726, 884750, 885172, 885501, 885995, 885988, 887196, 887210, 888628, 888585, 889547, 889645, 890169, 890181, 891140, 891157, 891483, 891483, 891797, 891790, 892125, 892112, 892402, 892495, 893178, 893541, 893966, 893967, 894524, 894591, 895097, 895142, 895426, 895430, 898315, 898330, 899271, 899282, 901168, 901181, 903079, 903079, 904902, 904902, 905279, 905280, 905456, 905497, 905796, 905933, 907807, 907820, 908992, 908998, 909393, 909449, 909886, 909867, 911312, 915445, 916128, 916128, 917204, 917201, 918079, 918089, 919057, 919119, 919853, 919872, 920195, 920579, 921319, 921699, 922757, 922757, 925159, 926899, 927165, 927166, 927687, 927760, 929472, 929482, 931830, 932003, 932317, 932641, 934422, 934746, 935360, 935412, 937178, 937178, 937993, 938229, 939029, 939041, 939628, 939621, 940124, 940613, 940942, 942382, 942888, 943148, 943645, 943795, 944145, 944462, 944704, 946470, 947789, 950912, 951058, 951042, 951239, 954481, 955482, 955502, 956437, 956609, 958165, 958472, 958699, 960201, 960317, 961293, 961427, 961484, 961618, 961751, 962437, 963181, 964794, 964938, 965369, 965385, 966320, 966334, 966735, 966716, 968950, 969242, 970207, 970209, 971558, 971574, 972893, 972999, 974411, 974444, 975616, 975876, 976667, 976691, 977359, 977356, 977919, 977931, 978221, 978304, 979110, 979134, 979751, 979972, 982725, 983016, 983342, 983466, 983813, 984637, 985128, 985128, 986045, 986445, 986972, 987190, 988497, 988525, 989406, 989421, 990698, 990700, 991800, 991793, 994966, 995076, 995768, 995768, 996379, 996409, 996621, 997058, 997459, 999694, 1000317, 1000317, 1000535, 1000751, 1001950, 1001950, 1004358, 1004864, 1005817, 1006482, 1006970, 1006963, 1007898, 1007895, 1009202, 1009205, 1010299, 1010306, 1011049, 1011046, 1013040, 1013268, 1014143, 1014144, 1014788, 1014795, 1015436, 1016448, 1016822, 1016837, 1018483, 1018673, 1020733, 1020951, 1021508, 1021513, 1022499, 1022492, 1023418, 1023411, 1024145, 1024580, 1024813, 1024929, 1025660, 1025807, 1029373, 1029373, 1030623, 1030610, 1030942, 1030968, 1032335, 1032770, 1033045, 1033233, 1033736, 1033736, 1034473, 1034576, 1034926, 1038177, 1039061, 1039045, 1039812, 1039921, 1041087, 1041109, 1042017, 1042244, 1043362, 1043390, 1044634, 1044807, 1045679, 1045853, 1047928, 1048084, 1049391, 1049809, 1050705, 1050702, 1051247, 1051313, 1052716, 1052741, 1053514, 1053861, 1054628, 1054810, 1055691, 1055828, 1056550, 1056569, 1057123, 1057496, 1058266, 1058273, 1059055, 1059267, 1060553, 1060573, 1062276, 1062534, 1066850, 1067140, 1067607, 1067628, 1068803, 1068824, 1069108, 1069105, 1069422, 1069427, 1071544, 1071930, 1072280, 1072449, 1073366, 1073381, 1074352, 1074467, 1074736, 1075105, 1077201, 1077437, 1079110, 1079367, 1081733, 1081738, 1082451, 1082482, 1083747, 1083747, 1085033, 1085033, 1085737, 1085842, 1086669, 1086688, 1087080, 1087114, 1087692, 1087916, 1089067, 1089232, 1090275, 1090629, 1092188, 1092874, 1093671, 1093811, 1095571, 1095572, 1096438, 1096532, 1096825, 1096959, 1098503, 1098504, 1098869, 1098896, 1099387, 1099690, 1102308, 1102321, 1104330, 1104345, 1104878, 1105353, 1106171, 1106300, 1107796, 1107954, 1109627, 1109774, 1110691, 1110709, 1111644, 1111659, 1111892, 1112702, 1113940, 1113959, 1115197, 1115440, 1115808, 1115827, 1117167, 1118441, 1118569, 1118556, 1118768, 1119062, 1119268, 1120502, 1120687, 1121198, 1121302, 1121430, 1121681, 1121727, 1121963, 1122045, 1122338, 1122404, 1122598, 1124437, 1124634, 1124655, 1126172, 1126356, 1127255, 1127224, 1127955, 1127959, 1129050, 1129047, 1129649, 1130089, 1130622, 1131943, 1132527, 1134154, 1135434, 1135440, 1136501, 1136503, 1137417, 1137475, 1138278, 1140761, 1142278, 1142369, 1142518, 1142972, 1143241, 1143398, 1144375, 1144550, 1145413, 1146556, 1146792, 1146929, 1147168, 1147289, 1149277, 1149510, 1149797, 1149976, 1150443, 1150567, 1151688, 1151692, 1154721, 1155358, 1157004, 1157951, 1160656, 1160836, 1161303, 1162996, 1164987, 1164987, 1167389, 1167639, 1169099, 1169599, 1170450, 1170645, 1171793, 1172274, 1174796, 1175645, 1176628, 1177049, 1178311, 1179704, 1180735, 1181227, 1182633, 1182630, 1183196, 1183202, 1184200, 1184202, 1184984, 1184981, 1185277, 1185355, 1185591, 1185584, 1186798, 1186791, 1187519, 1187841, 1189103, 1189122, 1190381, 1190670, 1191416, 1191646, 1192413, 1197174, 1198988, 1205717, 1207318, 1208380, 1209585, 1209649, 1210638, 1210640, 1211527, 1211524, 1212246, 1212273, 1212992, 1213135, 1214286, 1214291, 1215376, 1215366, 1216631, 1218311, 1218580, 1218605, 1219228, 1219260, 1220396, 1245000, 1245704, 1246187, 1246588, 1289190, 1290530, 1296024, 1296710, 1296707, 1298890, 1303021, 1304193, 1327706, 1328674, 1335743, 1335991, 1348422, 1348928, 1351098, 1352027, 1353404, 1354219, 1355555, 1357039, 1357269, 1358135, 1366423, 1366515, 1383157, 1383738, 1383752, 1383970, 1385022, 1385408, 1413280, 1414671, 1433914, 1434165, 1444707, 1444976, 1468806, 1469819, 1471031, 1472305, 1498744, 1499475, 1509856, 1510416, 1545428, 1546789, 1559802, 1560215, 1561384, 1562439, 1564014, 1564514, 1573092, 1573556, 1573800, 1574402, 1575441, 1575887, 1576002, 1577159, 1577146, 1578750, 1582520, 1583794, 1585532, 1586437, 1593630, 1594262, 1594287, 1595456, 1609165, 1609479, 1618821, 1620089, 1631421, 1632374, 1632371, 1632934, 1635091, 1636092, 1642071, 1642385, 1642385, 1643677, 1645317, 1645787, 1645900, 1646343, 1647069, 1647704, 1649117, 1649419, 1649675, 1650040, 1650037, 1650390, 1650948, 1651202, 1651641, 1652324, 1656030, 1657622, 1659290, 1659547, 1662981, 1663595, 1663676, 1664671, 1664746, 1665372, 1665413, 1665754, 1665855, 1666427, 1678660, 1679241, 1680188, 1680661, 1680666, 1681457, 1684643, 1684741, 1685111, 1685899, 1686733, 1687227, 1687305, 1687541, 1687562, 1688338, 1701487, 1701990, 1704204, 1704626, 1704768, 1705133, 1705868, 1706425, 1706630, 1707592, 1718157, 1718978, 1728718, 1730037, 1740571, 1741860, 1742102, 1743247, 1747498, 1748475, 1754663, 1755814, 1758300, 1758764, 1758771, 1759046, 1759324, 1760541, 1764921, 1765907, 1769314, 1769814, 1770204, 1770758, 1779624, 1781162, 1790089, 1791255, 1791286, 1791612, 1795398, 1796474, 1796494, 1797288, 1800711, 1801271, 1801324, 1802253, 1802671, 1804050, 1805468, 1805869, 1806994, 1808106, 1810264, 1810827, 1815431, 1816717, 1819117, 1819317, 1821526, 1821975, 1854961, 1855341, 1856347, 1856556, 1857569, 1858285, 1858297, 1859151, 1859225, 1859371, 1859368, 1859553, 1859623, 1859790, 1859930, 1860634, 1860828, 1861865, 1861922, 1862746, 1866845, 1868068, 1868512, 1869819, 1874030, 1874773, 1876203, 1876829, 1877190, 1877975, 1878891, 1879508, 1879511, 1879654, 1879684, 1880967, 1880986, 1881702, 1889806, 1891734, 1892096, 1893706, 1897091, 1898779, 1898807, 1900576, 1900576, 1900830, 1900967, 1901971, 1902001, 1903530, 1903533, 1904579, 1904593, 1905960, 1905961, 1906533, 1906548, 1907816, 1930174, 1932831, 1932831, 1933526, 1942854, 1943168, 1949352, 1950203, 1957353, 1957673, 1959310, 1959732, 1960131, 1960625, 1960780, 1961397, 1962276, 1962512, 1963053, 1963313, 1963342, 1963530, 1963718, 1964287, 1964375, 1964659, 1964721, 1964939, 1973816, 1974988, 1977321, 1978049, 1978403, 1978726, 1994863, 1995447, 1995453, 1996559, 2011275, 2012144, 2038304, 2038945, 2040483, 2041553, 2041749, 2042510, 2042528, 2043022, 2043036, 2044262, 2047469, 2047987, 2048114, 2049037, 2049055, 2049369, 2058236, 2059102, 2059122, 2059622, 2059963, 2061468, 2063578, 2064495, 2081364, 2082032, 2082034, 2082453, 2082457, 2083170, 2083269, 2083853, 2084133, 2084573, 2084916, 2085389, 2085364, 2086050, 2086050, 2087105, 2098996, 2099418, 2099604, 2100221, 2100218, 2100502, 2107770, 2108213, 2111860, 2112735, 2112907, 2113590, 2113593, 2114051, 2114053, 2114619, 2116806, 2117495, 2127146, 2127943, 2136439, 2136945, 2151649, 2152944, 2156941, 2157735, 2158796, 2159548, 2160394, 2161137, 2161131, 2161967, 2161964, 2162893, 2164013, 2165332, 2174395, 2174598, 2174615, 2174839, 2175034, 2175963, 2176911, 2177285, 2198896, 2199336, 2199323, 2200645, 2206792, 2207544, 2208093, 2208857, 2208870, 2209322, 2212790, 2213620, 2214127, 2214294, 2223123, 2223485, 2223499, 2224164, 2224177, 2225055, 2226857, 2228347, 2243917, 2244534, 2244527, 2245189, 2253131, 2254306, 2287933, 2289147, 2290910, 2292292, 2357663, 2358547, 2358668, 2359780, 2359777, 2360559, 2361747, 2362016, 2380194, 2380388, 2393024, 2393707, 2393729, 2395216, 2396014, 2397186, 2410193, 2410966, 2411057, 2411416, 2411948, 2412100, 2412361, 2412633, 2413032, 2413736, 2414128, 2414664, 2420206, 2420613, 2420756, 2421418, 2421536, 2422492, 2423470, 2424858, 2426185, 2426754, 2426770, 2428293, 2428419, 2428664, 2428737, 2429363, 2429630, 2430016, 2431640, 2431903, 2435063, 2436037, 2449523, 2450146, 2450307, 2451521, 2451634, 2452353, 2453943, 2454134, 2458104, 2459207, 2459204, 2460364, 2460333, 2462174, 2462171, 2464399, 2464442, 2465194, 2466997, 2468130, 2471171, 2471560, 2471669, 2471884, 2472123, 2472602, 2477793, 2478788, 2481740, 2483086, 2485806, 2487761, 2487766, 2488209, 2488211, 2488495, 2488510, 2489856, 2495695, 2496894, 2496967, 2497794, 2500481, 2501842, 2502781, 2503581, 2504876, 2505757, 2505797, 2507329, 2515725, 2517032, 2517269, 2518093, 2532334, 2533506, 2533551, 2533955, 2533956, 2535395, 2542288, 2543190, 2543521, 2545044, 2545112, 2546278, 2546275, 2547195, 2547209, 2547868, 2550422, 2551798, 2552698, 2553696, 2553928, 2554809, 2554824, 2555228, 2555256, 2556170, 2556421, 2557182, 2560061, 2560765, 2584990, 2586519, 2588365, 2589510, 2589536, 2589709, 2589866, 2590222, 2590420, 2591895, 2593807, 2595369, 2595395, 2596900, 2597012, 2598223, 2598409, 2600670, 2600700, 2601884, 2604475, 2604819, 2610683, 2611651, 2611648, 2613204, 2613197, 2613955, 2624885, 2625511, 2625700, 2626473, 2633226, 2634818, 2639917, 2641089, 2644182, 2645819, 2646103, 2646369, 2646513, 2646821, 2652666, 2653409, 2668668, 2669279, 2669797, 2670492, 2670494, 2671264, 2671637, 2673601, 2673943, 2675022, 2677448, 2677732, 2677903, 2678709, 2679771, 2680763, 2682130, 2682765, 2682780, 2683502, 2684478, 2684969, 2688646, 2688849, 2689005, 2689967, 2698817, 2699035, 2699425, 2699856, 2701527, 2702693, 2703788, 2705893, 2711228, 2711776, 2714704, 2714895, 2715135, 2717543, 2718081, 2718287, 2733655, 2734242, 2734620, 2734940, 2735160, 2735390, 2737357, 2737914, 2737907, 2738611, 2738709, 2739719, 2739739, 2740569, 2748588, 2749169, 2749453, 2751057, 2751184, 2751429, 2751532, 2752401, 2752382, 2753116, 2753149, 2754057, 2754054, 2754596, 2754689, 2755483, 2755759, 2756331, 2756355, 2756711, 2756822, 2757481, 2760031, 2760396, 2761938, 2763002, 2763157, 2763432, 2764694, 2765143, 2765954, 2767636, 2770375, 2771106, 2778611, 2779471, 2782184, 2783632, 2785308, 2785724, 2785847, 2786737, 2795830, 2796393, 2812851, 2814275, 2828579, 2829037, 2829277, 2831151, 2831227, 2833179, 2833193, 2834131, 2837435, 2839294, 2861410, 2861838, 2861825, 2862127, 2862281, 2862640, 2868337, 2869575, 2869539, 2869844, 2869841, 2870713, 2870700, 2871752, 2888633, 2889148, 2890514, 2891470, 2891622, 2892260, 2893641, 2894105, 2894343, 2895761, 2897305, 2897880, 2898042, 2899058, 2899301, 2900095, 2901024, 2901782, 2901772, 2903652, 2903744, 2903935, 2904327, 2904527, 2906478, 2906627], '1441435320.txt', 1994, 2864283)

1441417383.txt
1994

1441435320.txt
1994

1441438016.txt
1994

1441425091.txt
1994

1712348700.txt
2010

1601841329.txt
2004

1612182815.txt
2018

760463627.txt
2012

1441422514.txt
1994

1441469071.txt
1994

1441432667.txt
1994

1463725386.txt
1994

743618732.txt
2014

1751100798.txt
2018

1539805523.txt
1912

1663083713.txt
2017

1465726307.txt
2017

1437214887.txt
1963

1403805041.txt
1963

1678163063.txt
2010

1735489259.txt
2013

657154530.txt
2004

1674515771.txt
2011

1602078157.txt
2015

1437286588.txt
1954

1465395834.txt
2014

959165045.txt
2012

925190036.txt
2013

1441427618.txt
1994

1602080981.txt
2015

595636499.txt
1963

1674523067.txt
2019

1447592072.txt
2009

1437407340.txt
1985

1566528744.txt
2014

1465723744.txt
2016

1441407042.txt
1994

1672768747.txt
2017

1441463897.txt
1994

1264131736.txt
2016

640834542.txt
2012

1546946294.txt
2015

1712362547.txt
2010

743615870.txt
2014

1437100239.txt
1954

1437379024.txt
1947

1003109770.txt
2013

953000921.txt
2009

1441419933.txt
1994

743624649.txt
2014

1674513033.txt
2019

1250040000.txt
2016

941146344.txt
2006

1733371935.txt
1999

1520096216.txt
2017

1437454895.txt
1988

941139768.txt
2007

1102949681.txt
2005

1441430143.txt
1994

1448605073.txt
2009

1441458773.txt
1994

927048389.txt
2013

1566421743.txt
2012

828461663.txt
2007

1441471806.txt
1994

1026653763.txt
2011

1712357011.txt
2010

760495145.txt
2013

1438927391.txt
2017

941142962.txt
2007

1566424515.txt
2012

1026605321.txt
2010

1441414870.txt
1994

1395206094.txt
2010

1465198127.txt
2011

1712354297.txt
2010

1236586396.txt
2005

1437137224.txt
1954

1602075369.txt
2015

1463669422.txt
1994

1441466401.txt
1994

1465398617.txt
2014

743612995.txt
2014

1441404442.txt
1994

743649775.txt
2014

49240382.txt
1998

743602172.txt
2014

1441461393.txt
1994

1737752876.txt
2019

1733374753.txt
2015

'''

all_indexs = []
all_gene_indexs = []
all_intergene_indexs = []
all_genome_lengths = []
file_order = []

ordered_genomes = ['1437193614', '1437407340', '1539281166', '1437270275', '1437325132', '1336587727', '520996365', '1441435320', '1200850421', '1335846595', '974697948', '1346708089', '1733371935', '1332390840', '1335856424', '1335862171', '1539964857', '1601841329', '1102949681', '941146344', '828461663', '941139768', '953000921', '1712357011', '1026653763', '1566421743', '927048389', '1465398617', '1602075369', '1465723744', '1520096216', '1612182815', '1674513033']

for file in ordered_genomes:
    all_indexs_per_species = []
    temp_all_indexs_per_species = []

    # if file in reversed_genomes:
    #     with open("/Users/LarryBliss/PycharmProjects/Final_Year_Project/Staph aureus Genomes/" + str(file), 'r') as infile:
    #         lines = infile.readlines()
    #         for line in lines:
    #             try:
    #                 if line.startswith("     CDS            ") and 'complement' not in line:
    #                     gene_index = line[21:-1].split("..")
    #                     temp_all_indexs_per_species.append(int(gene_index[0]))
    #                     temp_all_indexs_per_species.append(int(gene_index[1]))
    #
    #                 elif line.startswith("     source          "):
    #                     genome_length = line.split('..')
    #                     genome_length = genome_length[-1][:-1]
    #
    #
    #             except:
    #                 pass
    #         temp = temp_all_indexs_per_species[-1]
    #         for x in reversed(temp_all_indexs_per_species):
    #             all_indexs_per_species.append(temp - int(x))
    #
    #
    #     all_indexs.append((all_indexs_per_species, file))
    #     file_order.append(str(file))
    #
    # else:
    with open("/Users/LarryBliss/PycharmProjects/Final_Year_Project/Staph aureus Genomes/" + str(file) + '.txt', 'r') as infile:
        lines = infile.readlines()
        for line in lines:
            try:
                if line.startswith("     CDS            ") and 'complement' not in line:
                    # print(line[21:-1])
                    gene_index = line[21:-1].split("..")
                    all_indexs_per_species.append(int(gene_index[0]))
                    all_indexs_per_species.append(int(gene_index[1]))
                elif line.startswith("     source          "):
                    genome_length = line.split('..')
                    genome_length = genome_length[-1][:-1]
            except:
                pass
        difference_in_genome_length = 3080473 - all_indexs_per_species[-1]
        temp = []
        for element in all_indexs_per_species:
            temp.append(element * (1+(difference_in_genome_length / all_indexs_per_species[-1])))
        all_indexs_per_species = temp
    all_indexs.append((all_indexs_per_species, file))
    print(file)
    print(all_indexs_per_species)
    # print(str(file) + " : " + str(genome_length))

# for element in all_indexs:
#     print(element)

year_isolated = [1983, 1985, 1986, 1988, 1989, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019]


id = [1437193614, 1437407340, 1539281166, 1437270275, 1437325132, 1336587727, 520996365, 1441435320, 1200850421, 1335846595, 974697948, 1346708089, 1733371935, 1332390840, 1335856424, 1335862171, 1539964857, 1601841329, 1102949681, 941146344, 828461663, 941139768, 953000921, 1712357011, 1026653763, 1566421743, 927048389, 1465398617, 1602075369, 1465723744, 1520096216, 1612182815, 1674513033]

# for element, element1 in zip(year_isolated, id):
#     print(str(element1) + " : " + str(element))

id_isolated_dict = {1437193614 : 1983, 1437407340 : 1985, 1539281166 : 1986, 1437270275 : 1988, 1437325132 : 1989, 1336587727 : 1992, 520996365 : 1993, 1441435320 : 1994, 1200850421 : 1995, 1335846595 : 1996, 974697948 : 1997, 1346708089 : 1998, 1733371935 : 1999, 1332390840 : 2000, 1335856424 : 2001, 1335862171 : 2002, 1539964857 : 2003, 1601841329 : 2004, 1102949681 : 2005, 941146344 : 2006, 828461663 : 2007, 941139768 : 2008, 953000921 : 2009, 1712357011 : 2010, 1026653763 : 2011, 1566421743 : 2012, 927048389 : 2013, 1465398617 : 2014, 1602075369 : 2015, 1465723744 : 2016, 1520096216 : 2017, 1612182815 : 2018, 1674513033 : 2019}

genome_length_dict = {1437193614 : 2801980, 1437407340 : 2890950, 1539281166 : 2838411, 1437270275 : 2833640, 1437325132 : 2846624, 1336587727 : 2877716, 520996365 : 2980548, 1441435320 : 2913163, 1200850421 : 2764435, 1335846595 : 2878504, 974697948 : 2860370, 1346708089 : 2800003, 1733371935 : 2879031, 1332390840 : 2882285, 1335856424 : 2955890, 1335862171 : 2811767, 1539964857 : 2955381, 1601841329 : 2860082, 1102949681 : 2771849, 941146344 : 2842022, 828461663 : 2839253, 941139768 : 2830976, 953000921 : 2803594, 1712357011 : 2806828, 1026653763 : 3089367, 1566421743 : 2786527, 927048389 : 2783537, 1465398617 : 2839540, 1602075369 : 2945245, 1465723744 : 2733771, 1520096216 : 2791218, 1612182815 : 2695389, 1674513033 : 2796973}




all_indexs_with_year = []
for element in all_indexs:
    print(element[0])
    print(id_isolated_dict[int(element[1])])
    all_indexs_with_year.append((element[0], element[1], id_isolated_dict[int(element[1])], genome_length_dict[int(element[1])]))

# print(all_indexs_with_year[1])



def Sort_Tuple(tup):
    tup.sort(key=lambda x: x[2])
    return tup

temp = all_indexs_with_year
# sorted_all_indexs_with_genome_length = Sort_Tuple(all_indexs_with_year)
sorted_all_indexs_with_year = Sort_Tuple(all_indexs_with_year)


total_gene_list = []
alpha_red = 1 / (len(all_indexs_with_year))
alpha_stalk = 1 / (len(all_indexs_with_year))
total_red = 0.2
total_stalk = 0.2
total_alpha_red = 0
total_alpha_stalk = 0

total = 0
for strain in all_indexs_with_year:
    genome_length = strain[0][-1]
    month_income = strain[0][-1] // 12
    total = 0
    new_list = []
    initial_income = month_income
    year_long_list = []
    for element in strain[0]:
        new_list.append(element)
        if element >= initial_income:
            # print(new_list)
            year_long_list.append(new_list)
            new_list = []
            initial_income += month_income
    intergene_list = []
    gene_list = []
    start = 1
    temp = 0
    for month in range(12):
        intergene = 0
        gene = 0
        count = 0
        for index in year_long_list[month]:
            if count % 2 == 0:
                intergene += index - start
            else:
                gene += index - start
            start = index
            count += 1
        try:
            intergene_list.append(intergene/(year_long_list[month][-1]-temp))
            gene_list.append(gene/(year_long_list[month][-1]-temp))
        except:
            intergene_list.append(intergene_list[-1])
            gene_list.append(gene_list[-1])
        temp = year_long_list[month][-1]
    total_alpha_red += alpha_red
    # color1 = (round(total_red, 1), .4, .4, round(total_alpha_red, 1))
    if total_alpha_red >= 1:
        total_alpha_red = 1
    color1 = (0, 0, 0, round(total_alpha_red, 4))
    # print()
    # print(strain[0])
    # print(len(strain[0]))
    # print(strain[1])
    # print(strain[2])
    # print(color1)
    plt.plot([x for x in range(12)], gene_list, color='black', linewidth=0.5)
    plt.xlabel("Month (Genome Segment)")
    plt.ylabel("Gene Density (Average Propensity to Consume)")
    total_gene_list.append(gene_list)
plt.title("Seasonal Changes to Staph. aureus Genes")
plt.show()
#
#
#
# class StationarityTests:
#     def __init__(self, significance=.05):
#         self.SignificanceLevel = significance
#         self.pValue = None
#         self.isStationary = None
#
#     def ADF_Stationarity_Test(self, timeseries, printResults=True):
#         # Dickey-Fuller test:
#         adfTest = adfuller(timeseries, autolag='AIC')
#
#         self.pValue = adfTest[1]
#
#         if (self.pValue < self.SignificanceLevel):
#             self.isStationary = True
#         else:
#             self.isStationary = False
#
#         if printResults:
#             dfResults = pd.Series(adfTest[0:4],
#                                   index=['ADF Test Statistic', 'P-Value', '# Lags Used', '# Observations Used'])
#             # Add Critical Values
#             for key, value in adfTest[4].items():
#                 dfResults['Critical Value (%s)' % key] = value
#             print('Augmented Dickey-Fuller Test Results:')
#             print(dfResults)
total_gene_list = [item for sublist in total_gene_list for item in sublist]
# print(total_gene_list)
# sTest = StationarityTests()
# sTest.ADF_Stationarity_Test(total_gene_list, printResults = True)
# print("Is the time series stationary? {0}".format(sTest.isStationary))
# plt.plot([x for x in range(len(total_gene_list))], total_gene_list, color=color1, linewidth=0.5)





# import warnings
# import itertools
# import numpy as np
# import matplotlib.pyplot as plt
# import pandas as pd
# import statsmodels.api as sm
# import matplotlib
# from pylab import rcParams
# rcParams['figure.figsize'] = 18, 8
#
# df = pd.DataFrame(total_gene_list)
#
#
# # print(df.head())
#
# year_coloumn = []
# for x in year_isolated:
#     # print(x-min(year_isolated))
#     # print((x-min(year_isolated))/max(year_isolated)-min(year_isolated))
#     for y in range(1, 431):
#         year_coloumn.append((x-min(year_isolated))/(max(year_isolated)-min(year_isolated)))
#
# # print("year")
# # print(year_coloumn)
# date_time = []
# for x in year_isolated:
#     for y in range(1, 431):
#         date_time.append(str(y/431))
# df = df.set_index([date_time, total_gene_list])
#
#
#
#
#
# # print(date_time)
# # print(len(date_time))
# # print(len(total_gene_list))
# # print(df)
# # df = df.loc[~df.index.duplicated(keep='first')]
#
#
# from pandas import read_csv
# from pandas import datetime
# from pandas import DataFrame
# from pandas import concat
#
# # print(df)
#
# # df.to_csv('Staph_aureus_Season_Data_435_plus_0_with_index_even_lengths_extra_data.csv')
#
# # frame a sequence as a supervised learning problem
# def timeseries_to_supervised(data, lag=1):
#     df = DataFrame(data)
#     columns = [df.shift(i) for i in range(1, lag + 1)]
#     columns.append(df)
#     df = concat(columns, axis=1)
#     df.fillna(0, inplace=True)
#     return df
#
# supervised = timeseries_to_supervised(df, 1)
#
#
#
# # def series_to_supervised(data, n_in=1, n_out=1, dropnan=True):
# #     n_vars = 1 if type(data) is list else data.shape[1]
# #     df = DataFrame(data)
# #     cols, names = list(), list()
# #     # input sequence (t-n, ... t-1)
# #     for i in range(n_in, 0, -1):
# #         cols.append(df.shift(i))
# #         names += [('var%d(t-%d)' % (j+1, i)) for j in range(n_vars)]
# #     # forecast sequence (t, t+1, ... t+n)
# #     for i in range(0, n_out):
# #         cols.append(df.shift(-i))
# #         if i == 0:
# #             names += [('var%d(t)' % (j+1)) for j in range(n_vars)]
# #         else:
# #             names += [('var%d(t+%d)' % (j+1, i)) for j in range(n_vars)]
# #     # put it all together
# #     agg = concat(cols, axis=1)
# #     agg.columns = names
# #     # drop rows with NaN values
# #     if dropnan:
# #         agg.dropna(inplace=True)
# #     return agg
# #
# #
# #
# #
# #
# # supervised = series_to_supervised(df, 3, 1)
# # supervised.to_csv('Staph_aureus_Season_Data_435_plus_1_with_index_even_lengths_extra_data.csv')

